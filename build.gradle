plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id "com.modrinth.minotaur" version "1.2.1"
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        name = "sonatype-oss-snapshots"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven { url 'https://jitpack.io' }
    maven {
        url 'https://maven.bymartrixx.me'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    flatDir {
        dirs "libs"
    }
}
task release{

}
dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Player Events API
    modImplementation "me.bymartrixx.player-events:api:2.1.3"
    modCompileOnly "maven.modrinth:styled-chat:1.2.2+1.18"

    // =========  Common  =====================
    modImplementation include('de.erdbeerbaerlp:DiscordIntegration-Core:ce44c82e')

    // KiloEssentials
    modImplementation name: "kilo_essentials-1.20.4-ModernTimes-1.18-pre5"
}


processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 16
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
}

remapJar{
    classifier = "1.18.1"
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

//Curseforge publishing
curseforge {
    if (project.hasProperty('curseforge.apikey')) { // $GRADLE_USER_HOME/gradle.properties
        apiKey = getProperty("curseforge.apikey")
        project {
            id = '493679'
            changelog = project.changelog
            releaseType = project.releaseType.toLowerCase()
            addGameVersion '1.18.1'
            mainArtifact(remapJar) {
                displayName = "DiscordIntegration-Fabric $version (MC 1.18.1)"
            }
            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'player-events'
            }
        }
    }
}
import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth (type: TaskModrinthUpload){

    if (project.hasProperty('modrinth.apikey')) { // $GRADLE_USER_HOME/gradle.properties
        token = getProperty("modrinth.apikey") // Use an environment property!
        projectId = 'rbJ7eS5V'
        versionNumber = version+"-fabric-1.18.1"
        versionName = "DiscordIntegration-Fabric $version (MC 1.18.1)"
        uploadFile = remapJar
        changelog = project.changelog
        addGameVersion('1.18.1')
        addLoader('fabric')
        versionType = project.releaseType.toUpperCase()
    }
}

tasks.release.dependsOn(tasks.build, tasks.curseforge,tasks.publishModrinth)
